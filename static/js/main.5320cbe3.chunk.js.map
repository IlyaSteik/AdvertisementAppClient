{"version":3,"sources":["js/utils.js","apps/AdvertisementApp.js","index.js"],"names":["get","url","params","a","query","Object","keys","map","value","encodeURIComponent","join","url_","Promise","res","rej","fetch","method","then","json","answer","catch","err","error","code","text","toString","getUrlParams","window","location","search","length","JSON","parse","decodeURI","substring","replace","openUrl","element","document","createElement","href","target","click","remove","adAppApi","_vk_ref","AdvertisementApp","props","state","activeStory","storyHistory","apps","accounts","groups","stats","advert_messages","advert_group","our_advert","site_content","modalHistory","modalInfo","advert_messages_params","advert_group_params","selectedAppIdForWall","data_apps","data_accounts","data_groups","data_stats","data_advert_messages","data_advert_group","data_our_advert","data_site_content","componentDidMount","bind","canGoBack","back","popout","setState","history","pushState","pop","currentHistory","snackbar","bridge","send","status","go","panel","push","activePanel","onStoryChange","e","currentTarget","dataset","story","onInputChange","name","modalBack","setActiveModal","activeModal","addEventListener","preventDefault","subscribe","detail","type","data","undefined","console","log","schemeAttribute","createAttribute","scheme","body","attributes","setNamedItem","this","api","response","evt","tgt","event","srcElement","files","FileReader","resolve","file","fr","onload","includes","image","Image","src","result","canvas","createCanvas","width","height","getContext","drawImage","request","form","toDataURL","statusCode","readAsDataURL","advert_messages_groups","advert_group_groups","data_advert_message","uploadedFile","tabs","caption","icon","id","panels","left","onClick","size","before","index","key","style","marginTop","mode","top","contentEditable","app_id","after","app_name","admin_id","user_id","account","onClose","app_url","app_sign","group_messages","group_subscribe","display","stretched","marginLeft","splice","modal","header","login","password","right","inputAppIdRef","inputAppNameRef","inputAppAdminRef","inputAppUrlRef","inputAppSignRef","inputAppGroupMessagesRef","inputAppGroupSubscribeRef","message","defaultValue","getRef","ref","access_token","inputLoginRef","inputPasswordRef","inputTokenRef","photo_url","marginRight","group_name","group_id","inputGroupNameRef","inputGroupPhotoUrlRef","inputGroupTokenRef","inputGroupAdminIdRef","margin","level","weight","className","users","users_today","value1","alignItems","refs","sort","b","reverse","padding","ChipsSelect","showSelected","closeAfterSelect","onChange","options","title","label","renderOption","option","otherProps","filter","findIndex","creatable","owner_id","views","likes","comments","reposts","price","color","inputWallUrlRef","placeholder","inputWallPriceRef","inputWallAppIdRef","description","inputStickerTitleRef","inputStickerDescriptionRef","replaceAll","inputStickerUrlRef","id_","inputStickerIdRef","sticker","accept","multiple","uploadStickerImageRef","uploadFile","to_check","edited_keys","data-key","Application","withAdaptivity","isDesktop","viewWidth","ViewWidth","SMALL_TABLET","styleForSelectedCell","backgroundColor","borderRadius","justifyContent","fixed","maxWidth","disabled","data-story","animate","spaced","tabbar","selected","React","Component","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.5320cbe3.chunk.js","sourcesContent":["import {default as bridge} from '@vkontakte/vk-bridge';\r\n\r\nexport function convertTextToLines(text, font, max_width) {\r\n    const\r\n        {createCanvas} = require('canvas'),\r\n        canvas = createCanvas(1080, 1920),\r\n        ctx = canvas.getContext('2d')\r\n    ;\r\n    ctx.font = font;\r\n    let width = 0, lines = [], result, i, j;\r\n\r\n    while (text.length) {\r\n        for (i = text.length; ctx.measureText(text.substr(0, i)).width > max_width; i--) ;\r\n        result = text.substr(0, i);\r\n\r\n        if (i !== text.length)\r\n\r\n            for (j = 0; result.indexOf(' ', j) !== -1; j = result.indexOf(' ', j) + 1) ;\r\n        lines.push(result.substr(0, j || result.length));\r\n\r\n        width = Math.max(width, ctx.measureText(lines[lines.length - 1]).width);\r\n        text = text.substr(lines[lines.length - 1].length, text.length);\r\n    }\r\n\r\n    return lines;\r\n}\r\n\r\nexport async function get(url, params) {\r\n    const\r\n        query = params ? '?' + Object.keys(params).map((value) =>\r\n            encodeURIComponent(value) + '=' + encodeURIComponent(params[value])\r\n        ).join('&') : '',\r\n        url_ = `${url}${query}`;\r\n    return await new Promise((res, rej) => {\r\n        fetch(url_, {method: 'GET'})\r\n            .then(res =>\r\n                res.json()\r\n            )\r\n            .then(answer =>\r\n                res(answer)\r\n            ).catch(err =>\r\n            res({error: {code: -1, text: err.toString()}})\r\n        );\r\n    });\r\n}\r\n\r\nexport const defaultFonts = [\r\n    'SF Pro Text',\r\n    'SF Pro Text Heavy',\r\n    'SF Pro Text Semibold',\r\n    'SF Pro Display',\r\n    'SF Pro Display Bold',\r\n    'SF Pro Display Semibold',\r\n    'SF Pro Display Medium',\r\n    'SF Pro Rounded',\r\n    'SF Pro Rounded Semibold',\r\n    'SF Pro Rounded Bold',\r\n    'SF UI Display',\r\n    'SF UI Text',\r\n    'TT Commons',\r\n    'TT Commons Bold',\r\n    'TT Commons Demibold',\r\n    'Manrope ExtraBold'\r\n];\r\n\r\nexport function loadFonts(fonts = defaultFonts) {\r\n    for (const font of fonts) {\r\n        const span = document.createElement('span');\r\n        span.style.fontFamily = font;\r\n        span.innerText = '.';\r\n        document.body.appendChild(span);\r\n        setTimeout(() => span.remove(), 1);\r\n    }\r\n}\r\n\r\nexport function animateValue(obj, start, end, duration) {\r\n    if (start === end || end - start === 1) {\r\n        obj.innerHTML = end;\r\n    } else {\r\n        let startTimestamp = null;\r\n        const step = (timestamp) => {\r\n            if (!startTimestamp) startTimestamp = timestamp;\r\n            const progress = Math.min((timestamp - startTimestamp) / duration, 1);\r\n            obj.innerHTML = Math.floor(progress * (end - start) + start);\r\n            if (progress < 1) {\r\n                window.requestAnimationFrame(step);\r\n            }\r\n        };\r\n        window.requestAnimationFrame(step);\r\n    }\r\n}\r\n\r\nexport function cps(array) {\r\n    if (array.length !== 0) {\r\n        let\r\n            first_date = array[0],\r\n            cur_pos = 0,\r\n            clicks_per_second = []\r\n        ;\r\n        array = array.map(value => value - first_date);\r\n\r\n        for (const click of array) {\r\n            cur_pos = click < 1000 ? 0 : parseInt((click + '').substring(0, (click + '').length - 3));\r\n            clicks_per_second[cur_pos] = clicks_per_second[cur_pos] > 0 ? clicks_per_second[cur_pos] + 1 : 1;\r\n        }\r\n\r\n        clicks_per_second = clicks_per_second.filter(value => value > 0);\r\n\r\n        const\r\n            max_cps = Math.max(...clicks_per_second),\r\n            min_cps = Math.min(...clicks_per_second),\r\n            mid_cps = Math.ceil((max_cps + min_cps) / 2)\r\n        ;\r\n        return {max_cps, min_cps, mid_cps};\r\n    } else {\r\n        return {max_cps: 0, min_cps: 0, mid_cps: 0};\r\n    }\r\n}\r\n\r\nfunction componentToHex(c) {\r\n    const hex = c.toString(16);\r\n    return hex.length == 1 ? '0' + hex : hex;\r\n}\r\n\r\nexport function rgbToHex(r, g, b) {\r\n    return '#' + componentToHex(r) + componentToHex(g) + componentToHex(b);\r\n}\r\n\r\nexport function sleep(ms) {\r\n    return new Promise(resolve => setTimeout(resolve, ms));\r\n}\r\n\r\nexport function decOfNum(number, titles, needNumber = true) {\r\n    if (number !== undefined) {\r\n        let decCache = [],\r\n            decCases = [2, 0, 1, 1, 1, 2];\r\n        if (!decCache[number]) decCache[number] = number % 100 > 4 && number % 100 < 20 ? 2 : decCases[Math.min(number % 10, 5)];\r\n        return (needNumber ? number + ' ' : '') + titles[decCache[number]];\r\n    }\r\n}\r\n\r\nexport function numToStr(number) {\r\n    if (number > 0 && number <= 10) {\r\n        const words = [\r\n            'первое', 'второе', 'третье', 'четвертое', 'пятое', 'шестое', 'седьмое', 'восьмое', 'девятое', 'десятое'\r\n        ];\r\n        return words[number - 1];\r\n    } else {\r\n        return number + '';\r\n    }\r\n}\r\n\r\nexport function shortIntegers(int) {\r\n    try {\r\n        return int.toString().replace(/(\\d)(?=(\\d\\d\\d)+([^\\d]|$))/g, '$1 ');\r\n    } catch (e) {\r\n        return 0;\r\n    }\r\n}\r\n\r\nexport function shortIntegersK(int) {\r\n    const\r\n        int_ = shortIntegers(int),\r\n        split = int_.split(' ')\r\n    ;\r\n    return split[0] + new Array((split.length - 1)).fill('К').join('')\r\n}\r\n\r\nexport function getRandomInt(min, max) {\r\n    return Math.floor(Math.random() * (max - min + 1)) + min;\r\n}\r\n\r\nexport function getRandomInts(min, max, count) {\r\n    const array = [];\r\n    for (let i = 0; i < count; i++) {\r\n        const int = getRandomInt(min, max);\r\n        if (array.indexOf(int) === -1) {\r\n            array.push(int);\r\n        } else {\r\n            if (max >= count)\r\n                i--;\r\n            else\r\n                array.push(int);\r\n        }\r\n    }\r\n    return array;\r\n}\r\n\r\nexport function nodeToString(node) {\r\n    let tmpNode = document.createElement(\"div\");\r\n    tmpNode.appendChild(node.cloneNode(true));\r\n    let str = tmpNode.innerHTML;\r\n    tmpNode = node = null;\r\n    return str;\r\n}\r\n\r\nexport function convertMiliseconds(miliseconds) {\r\n    let hours, minutes, total_hours, total_minutes, total_seconds;\r\n\r\n    total_seconds = parseInt(Math.floor(miliseconds / 1000));\r\n    total_minutes = parseInt(Math.floor(total_seconds / 60));\r\n    total_hours = parseInt(Math.floor(total_minutes / 60));\r\n\r\n    minutes = parseInt(total_minutes % 60);\r\n    hours = parseInt(total_hours % 24);\r\n\r\n    return hours + 'ч. ' + minutes + 'мин.';\r\n}\r\n\r\nexport function convertMsToNormalTime(miliseconds) {\r\n    let hours, minutes, seconds, total_hours, total_minutes, total_seconds;\r\n\r\n    total_seconds = parseInt(Math.floor(miliseconds / 1000));\r\n    total_minutes = parseInt(Math.floor(total_seconds / 60));\r\n    total_hours = parseInt(Math.floor(total_minutes / 60));\r\n\r\n    seconds = parseInt(total_seconds % 60);\r\n    minutes = parseInt(total_minutes % 60);\r\n    hours = parseInt(total_hours % 24);\r\n\r\n    return {\r\n        hours, minutes, seconds, str: {\r\n            hours: hours.toLocaleString('ru', {minimumIntegerDigits: 2}),\r\n            minutes: minutes.toLocaleString('ru', {minimumIntegerDigits: 2}),\r\n            seconds: seconds.toLocaleString('ru', {minimumIntegerDigits: 2})\r\n        }\r\n    };\r\n}\r\n\r\nconst getImage = (src) =>\r\n    new Promise((res, rej) => {\r\n        const image = new Image();\r\n\r\n        image.onload = () => res(image);\r\n        image.crossOrigin = 'anonymous';\r\n        image.onstalled = (e) => {\r\n            console.log('Failed to fetch data, but trying.', e);\r\n            rej(e);\r\n        };\r\n        image.onerror = (e) => {\r\n            console.log('Failed to fetch data, error.', e);\r\n            rej(e);\r\n        };\r\n        image.src = src;\r\n    });\r\n\r\nexport async function toBlob(object, dataUrl = true) {\r\n    const\r\n        myCanvas = document.createElement('canvas'),\r\n        ctxt = myCanvas.getContext('2d');\r\n\r\n    let base = typeof object === 'string' ? object : window.btoa(object);\r\n    const img = await getImage(typeof object === 'string' ? base : `data:image/svg+xml;base64,${base}`);\r\n    myCanvas.height = img.height;\r\n    myCanvas.width = img.width;\r\n    if (ctxt === null) {\r\n        return \"\";\r\n    }\r\n    ctxt.drawImage(img, 0, 0, img.width, img.height);\r\n    return dataUrl ? myCanvas.toDataURL() : myCanvas;\r\n}\r\n\r\nexport function getUrlParams() {\r\n    return window.location.search.length > 0 && JSON.parse('{\"' + decodeURI(window.location.search.substring(1)).replace(/\"/g, '\\\\\"').replace(/&/g, '\",\"').replace(/=/g, '\":\"') + '\"}');\r\n}\r\n\r\nexport const platforms = {\r\n    desktop_web: /desktop_web/g,\r\n    mobile_android: /mobile_android/g,\r\n    mobile_android_messenger: /mobile_android_messenger/g,\r\n    mobile_ipad: /mobile_ipad/g,\r\n    mobile_iphone: /mobile_iphone/g,\r\n    mobile_iphone_messenger: /mobile_iphone_messenger/g,\r\n    mobile_web: /mobile_web/g,\r\n\r\n    android: /mobile_android|mobile_android_messenger/g,\r\n    ios: /mobile_ipad|mobile_iphone|mobile_iphone_messenger/g\r\n};\r\n\r\nexport function isPlatformIOS() {\r\n    return getUrlParams().vk_platform === 'mobile_iphone';\r\n}\r\n\r\nexport function isPlatformAndroid() {\r\n    return platforms.android.test(getUrlParams().vk_platform);\r\n}\r\n\r\nexport function isPlatformDesktop() {\r\n    return getUrlParams().vk_platform === 'desktop_web';\r\n}\r\n\r\nexport let\r\n    vk_local_users = {},\r\n    name_cases = ['first_name', 'last_name', 'first_name_dat', 'first_name_nom', 'first_name_gen', 'first_name_acc', 'first_name_ins', 'first_name_abl', 'last_name_dat', 'last_name_nom', 'last_name_gen', 'last_name_acc', 'last_name_ins', 'last_name_abl']\r\n;\r\n\r\nexport async function getVKUsers(ids) {\r\n    const\r\n        user_ids = [\r\n            ...new Set(\r\n                ids\r\n                    .filter(value => vk_local_users[value] === undefined)\r\n                    .map(\r\n                        value => typeof value === 'number' ? value : value.replace('@', '')\r\n                            .replace('id', '')\r\n                            .replace('vk.com/', '')\r\n                            .replace('http://', '')\r\n                            .replace('https://', '')\r\n                    )\r\n            )\r\n        ],\r\n        i = Math.floor(user_ids.length / 100)\r\n    ;\r\n\r\n    if (user_ids.length > 0) {\r\n        let users = [];\r\n\r\n        for (let j = 0; j < i + 1; j++) {\r\n            users = users.concat(\r\n                await vkApiRequest('users.get', {\r\n                    user_ids: user_ids.slice(j * 100, j * 100 + 100).join(','),\r\n                    fields: ['screen_name', 'photo_100', 'photo_200', 'photo_max_orig', 'sex', ...name_cases].join(',')\r\n                })\r\n            );\r\n        }\r\n\r\n        for (const user of users) {\r\n            vk_local_users[user.id] = user;\r\n        }\r\n    }\r\n\r\n    return ids.map(value => vk_local_users[value] || vk_local_users[Object.keys(vk_local_users).find(key => vk_local_users[key].screen_name === value)]);\r\n}\r\n\r\nexport async function vkApiRequest(method, params = {}) {\r\n    return (await bridge.send('VKWebAppCallAPIMethod', {\r\n        method,\r\n        params: {\r\n            ...params,\r\n            v: '5.126',\r\n            access_token: params.access_token || '7a8d6dcc7a8d6dcc7a8d6dcc637afa8f4477a8d7a8d6dcc1b06a888634e406617b4aef3'\r\n        }\r\n    })).response\r\n}\r\n\r\nexport function viewportToPixels(value) {\r\n    const\r\n        parts = value.match(/([0-9\\.]+)(vh|vw)/),\r\n        q = Number(parts[1]),\r\n        side = window[['innerHeight', 'innerWidth'][['vh', 'vw'].indexOf(parts[2])]]\r\n    ;\r\n    return side * (q / 100)\r\n}\r\n\r\nexport function openUrl(url) {\r\n    const element = document.createElement('a');\r\n    element.href = url;\r\n    element.target = '_blank';\r\n    element.click();\r\n    element.remove();\r\n}\r\n\r\nexport function getUrlLocation() {\r\n    return window.location.origin + window.location.pathname.replace('/index.html', '');\r\n}\r\n\r\nexport function getSrcUrl(resource) {\r\n    return getUrlLocation() + resource.substring(1);\r\n}\r\n\r\nexport async function getBase64Image(imageUri) {\r\n    const\r\n        canvas = document.createElement('canvas'),\r\n        ctx = canvas.getContext('2d'),\r\n        img = new Image()\r\n    ;\r\n    img.src = 'https://murmuring-bastion-20764.herokuapp.com/' + imageUri;\r\n    img.crossOrigin = 'Anonymous';\r\n    return await new Promise(resolve =>\r\n        img.onload = function () {\r\n            canvas.width = this.width;\r\n            canvas.height = this.height;\r\n            ctx.drawImage(img, 0, 0, this.width, this.height);\r\n            resolve(canvas.toDataURL('image/png'));\r\n        }\r\n    );\r\n}\r\n\r\nexport function appendScript(code) {\r\n    let\r\n        container = document.getElementById('advert_container'),\r\n        script = document.createElement('script')\r\n    ;\r\n    script.innerHTML = code;\r\n    if (container === null) {\r\n        container = document.createElement('div');\r\n        container.id = 'advert_container';\r\n        document.body.appendChild(container);\r\n    }\r\n    container.innerHTML = '';\r\n    setTimeout(() => {\r\n        container.appendChild(script);\r\n    }, 400);\r\n}\r\n\r\nexport async function adAppApi(method, params) {\r\n    return await get('https://api.ad-app.ru/method/' + method, {...getUrlParams(), ...params})\r\n}","import React from 'react';\r\nimport bridge from '@vkontakte/vk-bridge';\r\nimport '../css/AdvertisementApp.css';\r\n\r\nimport {\r\n    Panel,\r\n    View,\r\n    withAdaptivity,\r\n    SplitLayout,\r\n    SplitCol,\r\n    Epic,\r\n    Group,\r\n    Cell,\r\n    Tabbar,\r\n    TabbarItem,\r\n    PanelHeader,\r\n    PanelHeaderBack,\r\n    ViewWidth,\r\n    PanelHeaderClose,\r\n    Button,\r\n    FormLayout,\r\n    FormItem,\r\n    Input,\r\n    FormLayoutGroup,\r\n    Div,\r\n    ModalRoot,\r\n    ModalPage,\r\n    ModalPageHeader,\r\n    PanelHeaderSubmit,\r\n    IconButton,\r\n    CardGrid,\r\n    Card,\r\n    Title,\r\n    Link,\r\n    Subhead,\r\n    Headline,\r\n    Text,\r\n    CustomSelectOption,\r\n    Avatar,\r\n    Select,\r\n    Textarea,\r\n    ScreenSpinner,\r\n    Snackbar\r\n} from '@vkontakte/vkui';\r\nimport {ChipsSelect} from '@vkontakte/vkui/dist/unstable';\r\nimport {\r\n    Icon28ServicesCircleFillBlue,\r\n    Icon28Profile,\r\n    Icon28AddOutline,\r\n    Icon16LinkOutline,\r\n    Icon16InfoOutline,\r\n    Icon28Users3Outline,\r\n    Icon28StatisticCircleFillBlue,\r\n    Icon28MessageCircleFillGreen,\r\n    Icon28RepostCircleFillGreen, Icon28MoneyTransferCircleFillRed, Icon24DeleteOutline, Icon28StarsCircleFillViolet\r\n} from \"@vkontakte/icons\";\r\n\r\nimport fetch from 'node-fetch';\r\n\r\nimport {registerFont, createCanvas, loadImage} from 'canvas';\r\nimport request from \"request\";\r\n\r\nimport {get, adAppApi, getUrlParams, openUrl} from \"../js/utils\";\r\n\r\nconst\r\n    uploadUrl = 'https://murmuring-bastion-20764.herokuapp.com/https://api.imgbb.com/1/upload?key=b2bfb837d63c6adae4d191841abb04dc',\r\n\r\n    MODAL_PAGE_EDIT_PROFILE = 'edit-profile',\r\n    MODAL_PAGE_ADD_PROFILE = 'add-profile',\r\n    MODAL_PAGE_VIEW_PROFILE = 'view-profile',\r\n    MODAL_PAGE_EDIT_APP = 'edit-app',\r\n    MODAL_PAGE_ADD_APP = 'add-app',\r\n    MODAL_PAGE_EDIT_GROUP = 'edit-group',\r\n    MODAL_PAGE_ADD_GROUP = 'add-group',\r\n    MODAL_PAGE_INFO_REF = 'info-ref',\r\n    MODAL_PAGE_ADD_WALL = 'add-wall',\r\n    MODAL_PAGE_ADD_STICKER = 'add-sticker',\r\n    MODAL_PAGE_EDIT_STICKER = 'edit-sticker'\r\n;\r\n\r\nconst\r\n    _vk_ref = {\r\n        'catalog_recent': 'категория недавних',\r\n        'catalog_favourites': 'категория избранных',\r\n        'catalog_recommendation': 'категория рекомендуемых',\r\n        'catalog_top_dau': 'категория популярных',\r\n        'catalog_entertainment': 'категория развлечений',\r\n        'catalog_communication': 'категория общение',\r\n        'catalog_tools': 'категория инструментов',\r\n        'catalog_shopping': 'категория покупок',\r\n        'catalog_events': 'категория мероприятий',\r\n        'catalog_education': 'категория образование',\r\n        'catalog_payments': 'категория оплаты услуг',\r\n        'catalog_finance': 'категория финансов',\r\n        'catalog_food': 'категория еды и напитков',\r\n        'catalog_health': 'категория красоты и здоровья',\r\n        'catalog_travel': 'категория путешествий',\r\n        'catalog_taxi': 'категория такси',\r\n        'catalog_jobs': 'категория работы в каталоге',\r\n        'catalog_realty': 'категория недвижимости',\r\n        'catalog_business': 'категория бизнеса',\r\n        'catalog_lifestyle': 'категория образа жизни',\r\n        'catalog_admin': 'категория созданных',\r\n        'board_topic_all': 'превью обсуждения',\r\n        'board_topic_view': 'внутренний экран',\r\n        'feed': 'первый таб с лентой',\r\n        'feed_post': 'по ссылке без сниппета внутри поста',\r\n        'feed_comments': 'из комментариев',\r\n        'featuring_discover': 'дискавери выдача',\r\n        'featuring_menu': 'дискавери меню',\r\n        'featuring_new': 'фичеринг во втором табе',\r\n        'fave': 'общий список',\r\n        'fave_links': 'список ссылок',\r\n        'fave_posts': 'список постов',\r\n        'group': 'со стены сообщества',\r\n        'group_menu': 'из меню сообщества (Android)',\r\n        'group_messages': 'из сообщений',\r\n        'group_addresses': 'адрес сообщества',\r\n        'snippet_post': 'переход из сниппета поста',\r\n        'snippet_im': 'переход из сниппета в личных сообщениях',\r\n        'clips': 'из экрана клипов (iOS)',\r\n        'comments_list_clip': 'из комментариев к клипу (Android)',\r\n        'im': 'превью чата',\r\n        'im_chat': 'внутри чата',\r\n        'notifications': 'внешний экран уведомлений',\r\n        'notifications_grouped': 'экран сгрупированных уведомлений',\r\n        'notifications_auto': 'одно или сгруппированное автоуведомление',\r\n        'article_read': 'из статьи',\r\n        'music_playlist': 'из музыкального плейлиста',\r\n        'video_carousel': 'из видео (iOS)',\r\n        'photo_browser': 'из поста после нативного просмотрщика (iOS)',\r\n        'shopping_center': 'из ленты товаров (iOS)',\r\n        'market_item': 'из экрана товара',\r\n        'widget': 'переход из второй вкладки приложения',\r\n        'home_screen': 'запуск с главного экрана устройства (Android)',\r\n        'left_nav': 'переход из левого меню на вебе',\r\n        'quick_search': 'результаты быстрого поиска',\r\n        'menu': 'переход из недавних через пятый таб в мобильном вебе',\r\n        'other': 'прочие переходы.'\r\n    }\r\n;\r\n\r\nclass AdvertisementApp extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            activeStory: 'apps',\r\n            storyHistory: {\r\n                apps: ['apps'],\r\n                accounts: ['accounts'],\r\n                groups: ['groups'],\r\n                stats: ['stats'],\r\n                advert_messages: ['advert_messages'],\r\n                advert_group: ['advert_group'],\r\n                our_advert: ['our_advert'],\r\n                site_content: ['site_content']\r\n            },\r\n\r\n            modalHistory: [],\r\n            modalInfo: {},\r\n\r\n            advert_messages_params: [],\r\n            advert_group_params: [],\r\n\r\n            selectedAppIdForWall: 0,\r\n\r\n            data_apps: [],\r\n            data_accounts: [],\r\n            data_groups: [],\r\n            data_stats: [],\r\n            data_advert_messages: [],\r\n            data_advert_group: [],\r\n            data_our_advert: [],\r\n            data_site_content: []\r\n        };\r\n\r\n        this.componentDidMount = this.componentDidMount.bind(this);\r\n        this.canGoBack = () => {\r\n            const currentHistory = this.state.storyHistory[this.state.activeStory];\r\n            return currentHistory.length > 1;\r\n        };\r\n        this.back = () => {\r\n            if (this.state.popout !== null) {\r\n                this.setState({popout: null});\r\n                window.history.pushState({pop: 'popout'}, 'Title');\r\n                return;\r\n            }\r\n            const\r\n                {activeStory, storyHistory} = this.state,\r\n                currentHistory = storyHistory[activeStory]\r\n            ;\r\n\r\n            if (currentHistory.length > 1) {\r\n                currentHistory.pop();\r\n                this.setState({storyHistory, snackbar: null});\r\n            } else {\r\n                bridge.send('VKWebAppClose', {status: 'success'});\r\n            }\r\n        };\r\n        this.go = (panel) => {\r\n            let {history} = this.state;\r\n            if (history[history.length - 1] !== panel) {\r\n                history.push(panel);\r\n                window.history.pushState({activePanel: panel}, 'Title');\r\n                this.setState({activePanel: panel, history, snackbar: null});\r\n            }\r\n        };\r\n        this.onStoryChange = (e) => this.setState({activeStory: e.currentTarget.dataset.story});\r\n        this.onInputChange = (e) => {\r\n            const {name, value} = e.currentTarget;\r\n            this.setState({[name]: value});\r\n        };\r\n        this.modalBack = () => {\r\n            const {modalHistory} = this.state;\r\n            modalHistory.pop();\r\n            this.setState({modalHistory})\r\n        };\r\n        this.setActiveModal = (activeModal) => this.setState({\r\n            modalHistory: [...this.state.modalHistory, activeModal]\r\n        });\r\n    }\r\n\r\n    async componentDidMount() {\r\n        window.addEventListener('popstate', e => {\r\n            e.preventDefault();\r\n            this.back();\r\n        });\r\n\r\n        bridge.subscribe(async ({detail: {type, data}}) => {\r\n            if (type !== undefined) console.log(type, data);\r\n            if (type === 'VKWebAppUpdateConfig') {\r\n                const schemeAttribute = document.createAttribute('scheme');\r\n                schemeAttribute.value = data.scheme ? data.scheme === 'client_light' ? 'bright_light' : data.scheme : 'bright_light';\r\n                document.body.attributes.setNamedItem(schemeAttribute);\r\n            } else if (type === 'VKWebAppViewRestore') {\r\n                this.setState({popout: null});\r\n            }\r\n        });\r\n\r\n        bridge.send('VKWebAppInit');\r\n        bridge.send('VKWebAppEnableSwipeBack');\r\n\r\n        await this.setState({\r\n            popout: <ScreenSpinner/>,\r\n            data_apps: (await this.api('apps.get')).response\r\n        });\r\n        this.setState({popout: null});\r\n    }\r\n\r\n    async uploadFile(evt) {\r\n        const\r\n            tgt = evt.target || window.event.srcElement,\r\n            {files} = tgt\r\n        ;\r\n\r\n        if (FileReader && files && files.length) {\r\n            return await new Promise(async resolve => {\r\n                let\r\n                    file = files[0],\r\n                    fr = new FileReader()\r\n                ;\r\n\r\n                fr.onload = async () => {\r\n                    if (file.type.includes('image')) {\r\n                        let image = new Image();\r\n                        image.src = fr.result;\r\n                        image.onload = async () => {\r\n                            const\r\n                                canvas = createCanvas(image.width, image.height),\r\n                                ctx = canvas.getContext('2d')\r\n                            ;\r\n                            ctx.drawImage(image, 0, 0, image.width, image.height);\r\n\r\n                            await request({\r\n                                url: uploadUrl, method: 'POST', form: {\r\n                                    image: canvas.toDataURL('image/png').replace('data:image/png;base64,', '')\r\n                                }\r\n                            }, (error, response, body) => {\r\n                                try {\r\n                                    if (response.statusCode === 200) {\r\n                                        resolve(JSON.parse(body).data.url);\r\n                                    } else {\r\n                                        console.log('error', body);\r\n                                        resolve(false);\r\n                                    }\r\n                                } catch (e) {\r\n                                    console.error(e);\r\n                                    resolve(false);\r\n                                }\r\n                            });\r\n                        };\r\n                    }\r\n                };\r\n\r\n                await fr.readAsDataURL(file);\r\n            });\r\n        }\r\n    }\r\n\r\n    async api(method, params = {}) {\r\n        console.log(method, params);\r\n        const response = await adAppApi(method, params);\r\n        console.log(response);\r\n        return response;\r\n    }\r\n\r\n    render() {\r\n        const\r\n            {\r\n                activeStory,\r\n                storyHistory,\r\n                modalHistory,\r\n                modalInfo,\r\n\r\n                advert_messages_params,\r\n                advert_messages_groups,\r\n                advert_group_params,\r\n                advert_group_groups,\r\n\r\n                selectedAppIdForWall,\r\n\r\n                data_apps,\r\n                data_accounts,\r\n                data_groups,\r\n                data_stats,\r\n                data_advert_message,\r\n                data_advert_group,\r\n                data_our_advert,\r\n                data_site_content,\r\n                uploadedFile\r\n            } = this.state,\r\n            tabs = [\r\n                {\r\n                    caption: 'Приложения*',\r\n                    icon: <Icon28ServicesCircleFillBlue/>,\r\n                    id: 'apps',\r\n                    panels: [\r\n                        <Panel id='apps'>\r\n                            <PanelHeader left={this.canGoBack() ? <PanelHeaderBack onClick={this.back}/> :\r\n                                <PanelHeaderClose onClick={this.back}/>}\r\n                            >\r\n                                Приложения\r\n                            </PanelHeader>\r\n                            <Button\r\n                                size='l' before={<Icon28AddOutline/>}\r\n                                onClick={() => {\r\n                                    this.setActiveModal(MODAL_PAGE_ADD_APP);\r\n                                }}\r\n                            >\r\n                                Добавить\r\n                            </Button>\r\n                            {\r\n                                data_apps.map((value, index) =>\r\n                                    <Group key={`Group_${index}`} style={{marginTop: 12}}>\r\n                                        <FormLayout>\r\n                                            <FormLayoutGroup mode='horizontal'>\r\n                                                <FormItem top='Идентификатор'>\r\n                                                    <Input\r\n                                                        contentEditable={false} value={value.app_id}\r\n                                                        after={<IconButton\r\n                                                            onClick={() => openUrl('https://vk.com/app' + value.app_id)}><Icon16LinkOutline/></IconButton>}\r\n                                                    />\r\n                                                </FormItem>\r\n                                                <FormItem top='Название'>\r\n                                                    <Input\r\n                                                        contentEditable={false} value={value.app_name}\r\n                                                    />\r\n                                                </FormItem>\r\n                                            </FormLayoutGroup>\r\n                                            <FormLayoutGroup mode='horizontal'>\r\n                                                <FormItem top='Администратор'>\r\n                                                    <Input\r\n                                                        contentEditable={false} value={value.admin_id}\r\n                                                        after={<IconButton\r\n                                                            onClick={async () => {\r\n                                                                this.setState({popout: <ScreenSpinner/>});\r\n                                                                const account = (await this.api('account.getById', {user_id: value.admin_id})).response;\r\n                                                                this.setState({\r\n                                                                    modalInfo: account !== null ? account : {},\r\n                                                                    snackbar: account === null && <Snackbar\r\n                                                                        onClose={() => this.setState({snackbar: null})}>\r\n                                                                        Аккаунта нет в базе данных\r\n                                                                    </Snackbar>\r\n                                                                });\r\n                                                                if (account !== null) {\r\n                                                                    this.setActiveModal(MODAL_PAGE_VIEW_PROFILE);\r\n                                                                }\r\n                                                            }}><Icon16InfoOutline/></IconButton>}\r\n                                                    />\r\n                                                </FormItem>\r\n                                                <FormItem\r\n                                                    top='APP_URL'\r\n                                                >\r\n                                                    <Input contentEditable={false}\r\n                                                           value={value.app_url}/>\r\n                                                </FormItem>\r\n                                                <FormItem\r\n                                                    top='APP_SIGN'\r\n                                                >\r\n                                                    <Input contentEditable={false}\r\n                                                           value={value.app_sign}/>\r\n                                                </FormItem>\r\n                                            </FormLayoutGroup>\r\n                                            <FormLayoutGroup mode='horizontal'>\r\n                                                <FormItem\r\n                                                    top='Группа на сообщения'\r\n                                                >\r\n                                                    <Input contentEditable={false}\r\n                                                           value={value.group_messages}\r\n                                                           after={<IconButton\r\n                                                               onClick={() => openUrl('https://vk.com/public' + value.group_messages)}><Icon16LinkOutline/></IconButton>}\r\n                                                    />\r\n                                                </FormItem>\r\n                                                <FormItem\r\n                                                    top='Группа на подписку'\r\n                                                >\r\n                                                    <Input contentEditable={false}\r\n                                                           value={value.group_subscribe}\r\n                                                           after={<IconButton\r\n                                                               onClick={() => openUrl('https://vk.com/public' + value.group_subscribe)}><Icon16LinkOutline/></IconButton>}\r\n                                                    />\r\n                                                </FormItem>\r\n                                            </FormLayoutGroup>\r\n                                            <Div style={{display: 'flex'}}>\r\n                                                <Button\r\n                                                    stretched mode='editable' size='m'\r\n                                                    onClick={async () => {\r\n                                                        await this.setState({modalInfo: {...value, index}});\r\n                                                        console.log(value);\r\n                                                        this.setActiveModal(MODAL_PAGE_EDIT_APP);\r\n                                                    }}\r\n                                                >\r\n                                                    Изменить\r\n                                                </Button>\r\n                                                <Button\r\n                                                    stretched mode='destructive' size='m'\r\n                                                    style={{\r\n                                                        marginLeft: 4\r\n                                                    }}\r\n                                                    onClick={async () => {\r\n                                                        this.setState({popout: <ScreenSpinner/>});\r\n                                                        const response = await this.api('apps.remove', {app_id: value.app_id});\r\n                                                        if (!response.response) {\r\n                                                            this.setState({\r\n                                                                popout: null,\r\n                                                                snackbar: <Snackbar\r\n                                                                    onClose={() => this.setState({snackbar: null})}>\r\n                                                                    {response.err}\r\n                                                                </Snackbar>\r\n                                                            });\r\n                                                            return;\r\n                                                        }\r\n                                                        data_apps.splice(index, 1)\r\n                                                        this.setState({popout: null, data_apps});\r\n                                                    }}\r\n                                                >\r\n                                                    Удалить\r\n                                                </Button>\r\n                                            </Div>\r\n                                        </FormLayout>\r\n                                    </Group>\r\n                                )\r\n                            }\r\n                        </Panel>\r\n                    ],\r\n                    modal: <ModalRoot activeModal={modalHistory[modalHistory.length - 1]}>\r\n                        <ModalPage\r\n                            id={MODAL_PAGE_VIEW_PROFILE}\r\n                            onClose={this.modalBack}\r\n                            header={\r\n                                <ModalPageHeader>Профиль</ModalPageHeader>\r\n                            }\r\n                        >\r\n                            <Group>\r\n                                <FormLayout>\r\n                                    <FormLayoutGroup mode='horizontal'>\r\n                                        <FormItem top='Логин'>\r\n                                            <Input contentEditable={false}\r\n                                                   value={modalInfo.login}/>\r\n                                        </FormItem>\r\n                                        <FormItem top='Пароль'>\r\n                                            <Input contentEditable={false}\r\n                                                   value={modalInfo.password}/>\r\n                                        </FormItem>\r\n                                    </FormLayoutGroup>\r\n                                    <Button\r\n                                        stretched mode='primary' size='m'\r\n                                        onClick={() => openUrl('https://vk.com/id' + modalInfo.id)}\r\n                                    >\r\n                                        Перейти\r\n                                    </Button>\r\n                                </FormLayout>\r\n                            </Group>\r\n                        </ModalPage>\r\n                        <ModalPage\r\n                            id={MODAL_PAGE_EDIT_APP}\r\n                            onClose={this.modalBack}\r\n                            header={\r\n                                <ModalPageHeader\r\n                                    right={<PanelHeaderSubmit onClick={async () => {\r\n                                        const\r\n                                            data = {\r\n                                                app_id: this.inputAppIdRef.value,\r\n                                                app_name: this.inputAppNameRef.value,\r\n                                                admin_id: this.inputAppAdminRef.value,\r\n                                                app_url: this.inputAppUrlRef.value,\r\n                                                app_sign: this.inputAppSignRef.value,\r\n                                                group_messages: this.inputAppGroupMessagesRef.value,\r\n                                                group_subscribe: this.inputAppGroupSubscribeRef.value\r\n                                            }\r\n                                        ;\r\n                                        this.setState({popout: <ScreenSpinner/>});\r\n                                        const response = await this.api('apps.edit', data);\r\n                                        if (response.error) {\r\n                                            this.setState({\r\n                                                popout: null,\r\n                                                snackbar: <Snackbar\r\n                                                    onClose={() => this.setState({snackbar: null})}>\r\n                                                    {response.error.message}\r\n                                                </Snackbar>\r\n                                            });\r\n                                            return;\r\n                                        }\r\n                                        this.modalBack();\r\n                                        data_apps.splice(modalInfo.index, 1, response.response)\r\n                                        this.setState({popout: null, data_apps});\r\n                                    }}/>}\r\n                                >\r\n                                    Редактирование\r\n                                </ModalPageHeader>\r\n                            }\r\n                        >\r\n                            <Group>\r\n                                <FormLayout>\r\n                                    <FormLayoutGroup mode='horizontal'>\r\n                                        <FormItem top='Идентификатор'>\r\n                                            <Input\r\n                                                defaultValue={modalInfo.app_id}\r\n                                                getRef={(ref) => this.inputAppIdRef = ref}\r\n                                            />\r\n                                        </FormItem>\r\n                                        <FormItem top='Название'>\r\n                                            <Input\r\n                                                defaultValue={modalInfo.app_name}\r\n                                                getRef={(ref) => this.inputAppNameRef = ref}\r\n                                            />\r\n                                        </FormItem>\r\n                                    </FormLayoutGroup>\r\n                                    <FormLayoutGroup mode='horizontal'>\r\n                                        <FormItem top='Администратор'>\r\n                                            <Input\r\n                                                defaultValue={modalInfo.admin_id}\r\n                                                getRef={(ref) => this.inputAppAdminRef = ref}\r\n                                            />\r\n                                        </FormItem>\r\n                                        <FormItem\r\n                                            top='APP_URL'\r\n                                        >\r\n                                            <Input\r\n                                                defaultValue={modalInfo.app_url}\r\n                                                getRef={(ref) => this.inputAppUrlRef = ref}/>\r\n                                        </FormItem>\r\n                                        <FormItem\r\n                                            top='APP_SIGN'\r\n                                        >\r\n                                            <Input\r\n                                                defaultValue={modalInfo.app_sign}\r\n                                                getRef={(ref) => this.inputAppSignRef = ref}/>\r\n                                        </FormItem>\r\n                                    </FormLayoutGroup>\r\n                                    <FormLayoutGroup mode='horizontal'>\r\n                                        <FormItem\r\n                                            top='Группа на сообщения'\r\n                                        >\r\n                                            <Input\r\n                                                defaultValue={modalInfo.group_messages}\r\n                                                getRef={(ref) => this.inputAppGroupMessagesRef = ref}\r\n                                            />\r\n                                        </FormItem>\r\n                                        <FormItem\r\n                                            top='Группа на подписку'\r\n                                        >\r\n                                            <Input\r\n                                                defaultValue={modalInfo.group_subscribe}\r\n                                                getRef={(ref) => this.inputAppGroupSubscribeRef = ref}\r\n                                            />\r\n                                        </FormItem>\r\n                                    </FormLayoutGroup>\r\n                                </FormLayout>\r\n                            </Group>\r\n                        </ModalPage>\r\n                        <ModalPage\r\n                            id={MODAL_PAGE_ADD_APP}\r\n                            onClose={this.modalBack}\r\n                            header={\r\n                                <ModalPageHeader\r\n                                    right={<PanelHeaderSubmit onClick={async () => {\r\n                                        const\r\n                                            data = {\r\n                                                app_id: this.inputAppIdRef.value,\r\n                                                admin_id: this.inputAppAdminRef.value,\r\n                                                app_url: this.inputAppUrlRef.value,\r\n                                                app_sign: this.inputAppSignRef.value,\r\n                                                group_messages: this.inputAppGroupMessagesRef.value,\r\n                                                group_subscribe: this.inputAppGroupSubscribeRef.value\r\n                                            }\r\n                                        ;\r\n                                        this.setState({popout: <ScreenSpinner/>});\r\n                                        const response = await this.api('apps.add', data);\r\n                                        if (response.error) {\r\n                                            this.setState({\r\n                                                popout: null,\r\n                                                snackbar: <Snackbar\r\n                                                    onClose={() => this.setState({snackbar: null})}>\r\n                                                    {response.error.message}\r\n                                                </Snackbar>\r\n                                            });\r\n                                            return;\r\n                                        }\r\n                                        this.modalBack();\r\n                                        this.setState({\r\n                                            popout: null,\r\n                                            data_apps: [...this.state.data_apps, response.response]\r\n                                        });\r\n                                    }}/>}\r\n                                >\r\n                                    Добавление\r\n                                </ModalPageHeader>\r\n                            }\r\n                        >\r\n                            <Group>\r\n                                <FormLayout>\r\n                                    <FormLayoutGroup mode='horizontal'>\r\n                                        <FormItem top='Идентификатор'>\r\n                                            <Input\r\n                                                getRef={(ref) => this.inputAppIdRef = ref}\r\n                                            />\r\n                                        </FormItem>\r\n                                        <FormItem top='Название'>\r\n                                            <Input\r\n                                                defaultValue={modalInfo.app_name}\r\n                                                getRef={(ref) => this.inputAppNameRef = ref}\r\n                                            />\r\n                                        </FormItem>\r\n                                    </FormLayoutGroup>\r\n                                    <FormLayoutGroup mode='horizontal'>\r\n                                        <FormItem top='Администратор'>\r\n                                            <Input\r\n                                                getRef={(ref) => this.inputAppAdminRef = ref}\r\n                                            />\r\n                                        </FormItem>\r\n                                        <FormItem\r\n                                            top='APP_URL'\r\n                                        >\r\n                                            <Input getRef={(ref) => this.inputAppUrlRef = ref}/>\r\n                                        </FormItem>\r\n                                        <FormItem\r\n                                            top='APP_SIGN'\r\n                                        >\r\n                                            <Input getRef={(ref) => this.inputAppSignRef = ref}/>\r\n                                        </FormItem>\r\n                                    </FormLayoutGroup>\r\n                                    <FormLayoutGroup mode='horizontal'>\r\n                                        <FormItem\r\n                                            top='Группа на сообщения'\r\n                                        >\r\n                                            <Input getRef={(ref) => this.inputAppGroupMessagesRef = ref}\r\n                                            />\r\n                                        </FormItem>\r\n                                        <FormItem\r\n                                            top='Группа на подписку'\r\n                                        >\r\n                                            <Input getRef={(ref) => this.inputAppGroupSubscribeRef = ref}\r\n                                            />\r\n                                        </FormItem>\r\n                                    </FormLayoutGroup>\r\n                                </FormLayout>\r\n                            </Group>\r\n                        </ModalPage>\r\n                    </ModalRoot>,\r\n                    method: 'apps.get'\r\n                },\r\n                {\r\n                    caption: 'Аккаунты*',\r\n                    icon: <Icon28Profile/>,\r\n                    id: 'accounts',\r\n                    panels: <Panel id='accounts'>\r\n                        <PanelHeader left={this.canGoBack() ? <PanelHeaderBack onClick={this.back}/> :\r\n                            <PanelHeaderClose onClick={this.back}/>}\r\n                        >\r\n                            Аккаунты\r\n                        </PanelHeader>\r\n                        <Button\r\n                            size='l' before={<Icon28AddOutline/>}\r\n                            onClick={() => {\r\n                                this.setActiveModal(MODAL_PAGE_ADD_PROFILE);\r\n                            }}\r\n                        >\r\n                            Добавить\r\n                        </Button>\r\n                        {\r\n                            data_accounts.map((value, index) =>\r\n                                <Group key={`Group_${index}`} style={{marginTop: 12}}>\r\n                                    <FormLayout>\r\n                                        <FormLayoutGroup mode='horizontal'>\r\n                                            <FormItem top='Идентификатор'>\r\n                                                <Input contentEditable={false} value={value.user_id}\r\n                                                       after={<IconButton\r\n                                                           onClick={() => {\r\n                                                               openUrl('https://vk.com/id' + value.user_id)\r\n                                                           }}><Icon16LinkOutline/></IconButton>}\r\n                                                />\r\n                                            </FormItem>\r\n                                            <FormItem top='Логин'>\r\n                                                <Input contentEditable={false} value={value.login}/>\r\n                                            </FormItem>\r\n                                            <FormItem top='Пароль'>\r\n                                                <Input contentEditable={false} value={value.password}/>\r\n                                            </FormItem>\r\n                                        </FormLayoutGroup>\r\n                                        <FormItem\r\n                                            top='Токен'\r\n                                        >\r\n                                            <Input contentEditable={false} value={value.access_token}/>\r\n                                        </FormItem>\r\n                                        <Div style={{display: 'flex'}}>\r\n                                            <Button\r\n                                                stretched mode='editable' size='m'\r\n                                                onClick={() => {\r\n                                                    this.setState({modalInfo: {...value, index}});\r\n                                                    this.setActiveModal(MODAL_PAGE_EDIT_PROFILE);\r\n                                                }}\r\n                                            >\r\n                                                Изменить\r\n                                            </Button>\r\n                                            <Button\r\n                                                stretched mode='destructive' size='m'\r\n                                                style={{\r\n                                                    marginLeft: 4\r\n                                                }}\r\n                                                onClick={async () => {\r\n                                                    this.setState({popout: <ScreenSpinner/>});\r\n                                                    const response = await this.api('account.remove', {user_id: value.user_id});\r\n                                                    if (!response.response) {\r\n                                                        this.setState({\r\n                                                            popout: null,\r\n                                                            snackbar: <Snackbar\r\n                                                                onClose={() => this.setState({snackbar: null})}>\r\n                                                                {response.err}\r\n                                                            </Snackbar>\r\n                                                        });\r\n                                                        return;\r\n                                                    }\r\n                                                    data_accounts.splice(index, 1)\r\n                                                    this.setState({popout: null, data_accounts});\r\n                                                }}\r\n                                            >\r\n                                                Удалить\r\n                                            </Button>\r\n                                        </Div>\r\n                                    </FormLayout>\r\n                                </Group>\r\n                            )\r\n                        }\r\n                    </Panel>,\r\n                    modal: <ModalRoot activeModal={modalHistory[modalHistory.length - 1]}>\r\n                        <ModalPage\r\n                            id={MODAL_PAGE_EDIT_PROFILE}\r\n                            onClose={this.modalBack}\r\n                            header={\r\n                                <ModalPageHeader\r\n                                    right={<PanelHeaderSubmit onClick={async () => {\r\n                                        const\r\n                                            data = {\r\n                                                login: this.inputLoginRef.value,\r\n                                                password: this.inputPasswordRef.value,\r\n                                                access_token: this.inputTokenRef.value\r\n                                            }\r\n                                        ;\r\n                                        this.setState({popout: <ScreenSpinner/>});\r\n                                        const response = await this.api('account.edit', data);\r\n                                        if (!response.response) {\r\n                                            this.setState({\r\n                                                popout: null,\r\n                                                snackbar: <Snackbar\r\n                                                    onClose={() => this.setState({snackbar: null})}>\r\n                                                    {response.err}\r\n                                                </Snackbar>\r\n                                            });\r\n                                            return;\r\n                                        }\r\n                                        this.modalBack();\r\n                                        data_accounts.splice(modalInfo.index, 1, response.response)\r\n                                        this.setState({popout: null, data_accounts});\r\n                                    }}/>}\r\n                                >\r\n                                    Редактирование\r\n                                </ModalPageHeader>\r\n                            }\r\n                        >\r\n                            <Group>\r\n                                <FormLayout>\r\n                                    <FormLayoutGroup mode='horizontal'>\r\n                                        <FormItem top='Логин'>\r\n                                            <Input getRef={(ref) => this.inputLoginRef = ref}\r\n                                                   defaultValue={modalInfo.login}/>\r\n                                        </FormItem>\r\n                                        <FormItem top='Пароль'>\r\n                                            <Input getRef={(ref) => this.inputPasswordRef = ref}\r\n                                                   defaultValue={modalInfo.password}/>\r\n                                        </FormItem>\r\n                                    </FormLayoutGroup>\r\n                                    <FormItem\r\n                                        top='Токен'\r\n                                    >\r\n                                        <Input getRef={(ref) => this.inputTokenRef = ref}\r\n                                               defaultValue={modalInfo.access_token}/>\r\n                                    </FormItem>\r\n                                </FormLayout>\r\n                            </Group>\r\n                        </ModalPage>\r\n                        <ModalPage\r\n                            id={MODAL_PAGE_ADD_PROFILE}\r\n                            onClose={this.modalBack}\r\n                            header={\r\n                                <ModalPageHeader\r\n                                    right={<PanelHeaderSubmit onClick={async () => {\r\n                                        const\r\n                                            data = {\r\n                                                login: this.inputLoginRef.value,\r\n                                                password: this.inputPasswordRef.value,\r\n                                                access_token: this.inputTokenRef.value\r\n                                            }\r\n                                        ;\r\n                                        this.setState({popout: <ScreenSpinner/>});\r\n                                        const response = await this.api('account.add', data);\r\n                                        if (!response.response) {\r\n                                            this.setState({\r\n                                                popout: null,\r\n                                                snackbar: <Snackbar\r\n                                                    onClose={() => this.setState({snackbar: null})}>\r\n                                                    {response.err}\r\n                                                </Snackbar>\r\n                                            });\r\n                                            return;\r\n                                        }\r\n                                        this.modalBack();\r\n                                        this.setState({\r\n                                            popout: null,\r\n                                            data_accounts: [...this.state.data_accounts, response.response]\r\n                                        });\r\n                                    }}/>}\r\n                                >\r\n                                    Добавление\r\n                                </ModalPageHeader>\r\n                            }\r\n                        >\r\n                            <Group>\r\n                                <FormLayout>\r\n                                    <FormLayoutGroup mode='horizontal'>\r\n                                        <FormItem top='Логин'>\r\n                                            <Input getRef={(ref) => this.inputLoginRef = ref}/>\r\n                                        </FormItem>\r\n                                        <FormItem top='Пароль'>\r\n                                            <Input getRef={(ref) => this.inputPasswordRef = ref}/>\r\n                                        </FormItem>\r\n                                    </FormLayoutGroup>\r\n                                    <FormItem top='Токен'>\r\n                                        <Input getRef={(ref) => this.inputTokenRef = ref}/>\r\n                                    </FormItem>\r\n                                </FormLayout>\r\n                            </Group>\r\n                        </ModalPage>\r\n                    </ModalRoot>,\r\n                    method: 'account.get'\r\n                },\r\n                {\r\n                    caption: 'Группы',\r\n                    icon: <Icon28Users3Outline/>,\r\n                    id: 'groups',\r\n                    panels: [\r\n                        <Panel id='groups'>\r\n                            <PanelHeader left={this.canGoBack() ? <PanelHeaderBack onClick={this.back}/> :\r\n                                <PanelHeaderClose onClick={this.back}/>}\r\n                            >\r\n                                Группы\r\n                            </PanelHeader>\r\n                            <Button\r\n                                size='l' before={<Icon28AddOutline/>}\r\n                                onClick={() => {\r\n                                    this.setActiveModal(MODAL_PAGE_ADD_GROUP);\r\n                                }}\r\n                            >\r\n                                Создать\r\n                            </Button>\r\n                            {\r\n                                data_groups.map((value, index) =>\r\n                                    <Group key={`Group_${index}`} style={{marginTop: 12}}>\r\n                                        <FormLayout>\r\n                                            <FormLayoutGroup mode='horizontal'>\r\n                                                <Avatar size={62} src={value.photo_url} style={{marginRight: 24}}/>\r\n                                                <FormItem top='Название'>\r\n                                                    <Input contentEditable={false} value={value.group_name}/>\r\n                                                </FormItem>\r\n                                            </FormLayoutGroup>\r\n                                            <FormLayoutGroup mode='horizontal'>\r\n                                                <FormItem top='Идентификатор'>\r\n                                                    <Input\r\n                                                        contentEditable={false} value={value.group_id}\r\n                                                        after={<IconButton\r\n                                                            onClick={() => openUrl('https://vk.com/public' + value.group_id)}><Icon16LinkOutline/></IconButton>}\r\n                                                    />\r\n                                                </FormItem>\r\n                                                <FormItem top='Администратор'>\r\n                                                    <Input\r\n                                                        contentEditable={false} value={value.admin_id}\r\n                                                        after={<IconButton\r\n                                                            onClick={async () => {\r\n                                                                this.setState({popout: <ScreenSpinner/>});\r\n                                                                const account = (await this.api('account.getById', {user_id: value.admin_id})).response;\r\n                                                                this.setState({\r\n                                                                    modalInfo: account !== null ? account : {},\r\n                                                                    snackbar: account === null && <Snackbar\r\n                                                                        onClose={() => this.setState({snackbar: null})}>\r\n                                                                        Аккаунта нет в базе данных\r\n                                                                    </Snackbar>\r\n                                                                });\r\n                                                                if (account !== null) {\r\n                                                                    this.setActiveModal(MODAL_PAGE_VIEW_PROFILE);\r\n                                                                }\r\n                                                            }}><Icon16InfoOutline/></IconButton>}\r\n                                                    />\r\n                                                </FormItem>\r\n                                                <FormItem\r\n                                                    top='PHOTO_URL'\r\n                                                >\r\n                                                    <Input contentEditable={false}\r\n                                                           value={value.photo_url}/>\r\n                                                </FormItem>\r\n                                            </FormLayoutGroup>\r\n                                            <FormItem top='Токен'>\r\n                                                <Input contentEditable={false}\r\n                                                       value={value.access_token}/>\r\n                                            </FormItem>\r\n                                            <Div style={{display: 'flex'}}>\r\n                                                <Button\r\n                                                    stretched mode='editable' size='m'\r\n                                                    onClick={() => {\r\n                                                        this.setState({modalInfo: {...value, index}});\r\n                                                        this.setActiveModal(MODAL_PAGE_EDIT_GROUP);\r\n                                                    }}\r\n                                                >\r\n                                                    Изменить\r\n                                                </Button>\r\n                                                <Button\r\n                                                    stretched mode='destructive' size='m'\r\n                                                    style={{\r\n                                                        marginLeft: 4\r\n                                                    }}\r\n                                                    onClick={async () => {\r\n                                                        this.setState({popout: <ScreenSpinner/>});\r\n                                                        const response = await this.api('groups.remove', {group_id: value.group_id});\r\n                                                        if (!response.response) {\r\n                                                            this.setState({\r\n                                                                popout: null,\r\n                                                                snackbar: <Snackbar\r\n                                                                    onClose={() => this.setState({snackbar: null})}>\r\n                                                                    {response.err}\r\n                                                                </Snackbar>\r\n                                                            });\r\n                                                            return;\r\n                                                        }\r\n                                                        data_groups.splice(index, 1)\r\n                                                        this.setState({popout: null, data_groups});\r\n                                                    }}\r\n                                                >\r\n                                                    Удалить\r\n                                                </Button>\r\n                                            </Div>\r\n                                        </FormLayout>\r\n                                    </Group>\r\n                                )\r\n                            }\r\n                        </Panel>\r\n                    ],\r\n                    modal: <ModalRoot activeModal={modalHistory[modalHistory.length - 1]}>\r\n                        <ModalPage\r\n                            id={MODAL_PAGE_VIEW_PROFILE}\r\n                            onClose={this.modalBack}\r\n                            header={\r\n                                <ModalPageHeader>Профиль</ModalPageHeader>\r\n                            }\r\n                        >\r\n                            <Group>\r\n                                <FormLayout>\r\n                                    <FormLayoutGroup mode='horizontal'>\r\n                                        <FormItem top='Логин'>\r\n                                            <Input contentEditable={false}\r\n                                                   value={modalInfo.login}/>\r\n                                        </FormItem>\r\n                                        <FormItem top='Пароль'>\r\n                                            <Input contentEditable={false}\r\n                                                   value={modalInfo.password}/>\r\n                                        </FormItem>\r\n                                    </FormLayoutGroup>\r\n                                    <Button\r\n                                        stretched mode='primary' size='m'\r\n                                        onClick={() => openUrl('https://vk.com/id' + modalInfo.id)}\r\n                                    >\r\n                                        Перейти\r\n                                    </Button>\r\n                                </FormLayout>\r\n                            </Group>\r\n                        </ModalPage>\r\n                        <ModalPage\r\n                            id={MODAL_PAGE_EDIT_GROUP}\r\n                            onClose={this.modalBack}\r\n                            header={\r\n                                <ModalPageHeader\r\n                                    right={<PanelHeaderSubmit onClick={async () => {\r\n                                        const\r\n                                            data = {\r\n                                                group_id: modalInfo.group_id,\r\n                                                group_name: this.inputGroupNameRef.value,\r\n                                                photo_url: this.inputGroupPhotoUrlRef.value\r\n                                            }\r\n                                        ;\r\n                                        this.setState({popout: <ScreenSpinner/>});\r\n                                        const response = await this.api('groups.edit', data);\r\n                                        if (response.error) {\r\n                                            this.setState({\r\n                                                popout: null,\r\n                                                snackbar: <Snackbar\r\n                                                    onClose={() => this.setState({snackbar: null})}>\r\n                                                    {response.error.message}\r\n                                                </Snackbar>\r\n                                            });\r\n                                            return;\r\n                                        }\r\n                                        this.modalBack();\r\n                                        data_groups.splice(modalInfo.index, 1, response.response)\r\n                                        this.setState({popout: null, data_groups});\r\n                                    }}/>}\r\n                                >\r\n                                    Редактирование\r\n                                </ModalPageHeader>\r\n                            }\r\n                        >\r\n                            <Group>\r\n                                <FormLayout>\r\n                                    <FormLayoutGroup mode='horizontal'>\r\n                                        <FormItem top='Название'>\r\n                                            <Input getRef={(ref) => this.inputGroupNameRef = ref}\r\n                                                   defaultValue={modalInfo.group_name}/>\r\n                                        </FormItem>\r\n                                        <FormItem top='PHOTO_URL'>\r\n                                            <Input getRef={(ref) => this.inputGroupPhotoUrlRef = ref}\r\n                                                   defaultValue={modalInfo.photo_url}/>\r\n                                        </FormItem>\r\n                                    </FormLayoutGroup>\r\n                                    <FormItem top='Токен'>\r\n                                        <Input getRef={(ref) => this.inputGroupTokenRef = ref}\r\n                                               defaultValue={modalInfo.access_token}/>\r\n                                    </FormItem>\r\n                                </FormLayout>\r\n                            </Group>\r\n                        </ModalPage>\r\n                        <ModalPage\r\n                            id={MODAL_PAGE_ADD_GROUP}\r\n                            onClose={this.modalBack}\r\n                            header={\r\n                                <ModalPageHeader\r\n                                    right={<PanelHeaderSubmit onClick={async () => {\r\n                                        const\r\n                                            data = {\r\n                                                group_name: this.inputGroupNameRef.value,\r\n                                                admin_id: this.inputGroupAdminIdRef.value,\r\n                                                photo_url: this.inputGroupPhotoUrlRef.value\r\n                                            }\r\n                                        ;\r\n                                        this.setState({popout: <ScreenSpinner/>});\r\n                                        const response = await this.api('groups.create', data);\r\n                                        if (response.e) {\r\n                                            this.setState({\r\n                                                popout: null,\r\n                                                snackbar: <Snackbar\r\n                                                    onClose={() => this.setState({snackbar: null})}>\r\n                                                    {response.e}\r\n                                                </Snackbar>\r\n                                            });\r\n                                            return;\r\n                                        }\r\n                                        this.modalBack();\r\n                                        this.setState({\r\n                                            popout: null,\r\n                                            data_groups: [...this.state.data_groups, response.response]\r\n                                        });\r\n                                    }}/>}\r\n                                >\r\n                                    Создание\r\n                                </ModalPageHeader>\r\n                            }\r\n                        >\r\n                            <Group>\r\n                                <FormLayout>\r\n                                    <FormItem top='Название'>\r\n                                        <Input getRef={(ref) => this.inputGroupNameRef = ref}/>\r\n                                    </FormItem>\r\n                                    <FormLayoutGroup mode='horizontal'>\r\n                                        <FormItem top='Администратор'>\r\n                                            <Input\r\n                                                getRef={(ref) => this.inputGroupAdminIdRef = ref}\r\n                                            />\r\n                                        </FormItem>\r\n                                        <FormItem\r\n                                            top='PHOTO_URL'\r\n                                        >\r\n                                            <Input getRef={(ref) => this.inputGroupPhotoUrlRef = ref}/>\r\n                                        </FormItem>\r\n                                    </FormLayoutGroup>\r\n                                </FormLayout>\r\n                            </Group>\r\n                        </ModalPage>\r\n                    </ModalRoot>,\r\n                    method: 'groups.get'\r\n                },\r\n                {\r\n                    caption: 'Статистика*',\r\n                    icon: <Icon28StatisticCircleFillBlue/>,\r\n                    id: 'stats',\r\n                    panels: [\r\n                        <Panel id='stats'>\r\n                            <PanelHeader left={this.canGoBack() ? <PanelHeaderBack onClick={this.back}/> :\r\n                                <PanelHeaderClose onClick={this.back}/>}\r\n                            >\r\n                                Статистика\r\n                            </PanelHeader>\r\n                            {\r\n                                data_stats.map((value, index) =>\r\n                                    <Group key={`Group_${index}`} style={{marginTop: 12}}>\r\n                                        <Title style={{margin: 12}} level='2' weight='regular'>\r\n                                            {value.app_name} — <Link href={'https://vk.com/app' + value.app_id}\r\n                                                                     target='_blank'>app{value.app_id}</Link>\r\n                                        </Title>\r\n                                        <CardGrid style={{marginTop: 12}}>\r\n                                            <Card size='l' mode='shadow'>\r\n                                                <div className='CardStats__Container'>\r\n                                                    <Headline weight='regular'>\r\n                                                        Пользователи\r\n                                                    </Headline>\r\n                                                    <Title style={{marginTop: 4}} weight='bold' level={1}>\r\n                                                        {value.users}\r\n                                                    </Title>\r\n                                                    <Subhead style={{marginTop: 4}} weight='semibold'>\r\n                                                        +{value.users_today}\r\n                                                    </Subhead>\r\n                                                </div>\r\n                                            </Card>\r\n                                            {\r\n                                                [\r\n                                                    ['Историй', 'story_shares'],\r\n                                                    ['Разрешили сообщения', 'allowed_message', 'group_messages'],\r\n                                                    ['Подписались на группу', 'subscribed_group', 'group_subscribe']\r\n                                                ].map((value1, index) =>\r\n                                                    <Card key={`Card_${index}`} size='l' mode='shadow'>\r\n                                                        <div className='CardStats__Container'>\r\n                                                            {\r\n                                                                value1.length > 2 ?\r\n                                                                    <Link target='_blank'\r\n                                                                          href={'https://vk.com/public' + [value[value1[2]]]}>\r\n                                                                        <Headline weight='regular'>\r\n                                                                            {value1[0]}\r\n                                                                        </Headline>\r\n                                                                    </Link>\r\n                                                                    :\r\n                                                                    <Headline weight='regular'>\r\n                                                                        {value1[0]}\r\n                                                                    </Headline>\r\n                                                            }\r\n                                                            <Title style={{marginTop: 4}} weight='bold' level={1}>\r\n                                                                {value[value1[1]]}\r\n                                                            </Title>\r\n                                                        </div>\r\n                                                    </Card>\r\n                                                )\r\n                                            }\r\n                                            <Card size='l' mode='shadow'>\r\n                                                <div className='CardStats__Container'>\r\n                                                    <div style={{display: 'flex', alignItems: 'center'}}>\r\n                                                        <Link onClick={() => {\r\n                                                            this.setState({modalInfo: value.refs});\r\n                                                            this.setActiveModal(MODAL_PAGE_INFO_REF);\r\n                                                        }}>\r\n                                                            <Headline weight='regular'>\r\n                                                                Источник\r\n                                                            </Headline>\r\n                                                        </Link>\r\n                                                    </div>\r\n                                                    <Title style={{marginTop: 4}} weight='bold' level={1}>\r\n                                                        {Object.keys(value.refs).sort((a, b) => value.refs[a] - value.refs[b]).reverse()[0]}\r\n                                                    </Title>\r\n                                                    <Subhead style={{marginTop: 4}} weight='semibold'>\r\n                                                        {value.refs[Object.keys(value.refs).sort((a, b) => value.refs[a] - value.refs[b]).reverse()[0]]}\r\n                                                    </Subhead>\r\n                                                </div>\r\n                                            </Card>\r\n                                        </CardGrid>\r\n                                    </Group>\r\n                                )\r\n                            }\r\n                        </Panel>\r\n                    ],\r\n                    modal: <ModalRoot activeModal={modalHistory[modalHistory.length - 1]}>\r\n                        <ModalPage\r\n                            id={MODAL_PAGE_INFO_REF}\r\n                            onClose={this.modalBack}\r\n                            header={\r\n                                <ModalPageHeader>Переходы в приложение</ModalPageHeader>\r\n                            }\r\n                        >\r\n                            <Group>\r\n                                {\r\n                                    [\r\n                                        Object.keys(modalInfo).sort((a, b) => modalInfo[a] - modalInfo[b]).reverse().map((value, index) =>\r\n                                            <Div key={`div_${index}`} style={{display: 'flex'}}>\r\n                                                <Text weight='regular'>{_vk_ref[value] || value}</Text>\r\n                                                <span style={{padding: '0 4px'}}> — </span>\r\n                                                <Text weight='semibold'>{modalInfo[value]}</Text>\r\n                                            </Div>\r\n                                        )\r\n                                    ]\r\n                                }\r\n                            </Group>\r\n                        </ModalPage>\r\n                    </ModalRoot>,\r\n                    method: 'stats.get'\r\n                },\r\n                {\r\n                    caption: 'Рассылка',\r\n                    icon: <Icon28MessageCircleFillGreen/>,\r\n                    id: 'advert_messages',\r\n                    panels: [\r\n                        <Panel id='advert_messages'>\r\n                            <PanelHeader left={this.canGoBack() ? <PanelHeaderBack onClick={this.back}/> :\r\n                                <PanelHeaderClose onClick={this.back}/>}\r\n                            >\r\n                                Рассылка\r\n                            </PanelHeader>\r\n                            <FormLayout>\r\n                                <FormItem top='Выберите группы'>\r\n                                    <ChipsSelect\r\n                                        showSelected={false}\r\n                                        closeAfterSelect={false}\r\n                                        value={advert_messages_groups}\r\n                                        onChange={advert_messages_groups => this.setState({advert_messages_groups})}\r\n                                        options={[\r\n                                            {\r\n                                                group_id: 1,\r\n                                                title: 'Название группы',\r\n                                                photo_url: 'https://i.ibb.co/pbZrHDc/coal.png',\r\n                                                admin_id: 1\r\n                                            }\r\n                                        ].map(value => {\r\n                                            return {value: value.group_id, label: value.title, src: value.photo_url}\r\n                                        })}\r\n                                        renderOption={({option: {src, value}, ...otherProps}) => {\r\n                                            return (\r\n                                                <CustomSelectOption\r\n                                                    before={<Avatar size={20} src={src}/>}\r\n                                                    {...otherProps}\r\n                                                />\r\n                                            );\r\n                                        }}\r\n                                    />\r\n                                </FormItem>\r\n                                <FormItem top='Добавьте параметр'>\r\n                                    <ChipsSelect\r\n                                        value={advert_messages_params}\r\n                                        onChange={advert_messages_params => {\r\n                                            if (this.state.advert_messages_params.length !== advert_messages_params.length) {\r\n                                                const value = this.state.advert_messages_params.filter(value => advert_messages_params.findIndex(value1 => value1.value === value.value) === -1);\r\n                                                for (let e of value) {\r\n                                                    this[`input_messages_${e.value}_param`] = undefined;\r\n                                                }\r\n                                            }\r\n                                            this.setState({advert_messages_params});\r\n                                        }}\r\n                                        options={['message', 'attachment', 'keyboard', 'dont_parse_links'].map(value => {\r\n                                            return {value, label: value}\r\n                                        })}\r\n                                        creatable={true}\r\n                                    />\r\n                                </FormItem>\r\n                                {advert_messages_params.map((value, index) => (\r\n                                    <FormLayoutGroup key={`LayoutGroup_${index}`} mode='horizontal'>\r\n                                        <FormItem>\r\n                                            <Input contentEditable='false' value={value.value}/>\r\n                                        </FormItem>\r\n                                        <FormItem>\r\n                                            <Input value={this[`input_messages_${value.value}_param`]}\r\n                                                   onChange={value1 =>\r\n                                                       this[`input_messages_${value.value}_param`] = value1.currentTarget.value\r\n                                                   }/>\r\n                                        </FormItem>\r\n                                    </FormLayoutGroup>\r\n                                ))}\r\n                                <Div>\r\n                                    <Button size='l'>Отправить</Button>\r\n                                </Div>\r\n                            </FormLayout>\r\n                        </Panel>\r\n                    ]\r\n                },\r\n                {\r\n                    caption: 'Реклама в группе',\r\n                    icon: <Icon28RepostCircleFillGreen/>,\r\n                    id: 'advert_group',\r\n                    panels: [\r\n                        <Panel id='advert_group'>\r\n                            <PanelHeader left={this.canGoBack() ? <PanelHeaderBack onClick={this.back}/> :\r\n                                <PanelHeaderClose onClick={this.back}/>}\r\n                            >\r\n                                Рекламный пост\r\n                            </PanelHeader>\r\n                            <FormLayout>\r\n                                <FormItem top='Выберите группы'>\r\n                                    <ChipsSelect\r\n                                        showSelected={false}\r\n                                        closeAfterSelect={false}\r\n                                        value={advert_group_groups}\r\n                                        onChange={advert_group_groups => this.setState({advert_group_groups})}\r\n                                        options={[\r\n                                            {\r\n                                                group_id: 1,\r\n                                                title: 'Название группы',\r\n                                                photo_url: 'https://i.ibb.co/pbZrHDc/coal.png',\r\n                                                admin_id: 1\r\n                                            }\r\n                                        ].map(value => {\r\n                                            return {value: value.group_id, label: value.title, src: value.photo_url}\r\n                                        })}\r\n                                        renderOption={({option: {src, value}, ...otherProps}) => {\r\n                                            return (\r\n                                                <CustomSelectOption\r\n                                                    before={<Avatar size={20} src={src}/>}\r\n                                                    {...otherProps}\r\n                                                />\r\n                                            );\r\n                                        }}\r\n                                    />\r\n                                </FormItem>\r\n                                <FormItem top='Добавьте параметр'>\r\n                                    <ChipsSelect\r\n                                        value={advert_group_params}\r\n                                        onChange={advert_group_params => this.setState({advert_group_params})}\r\n                                        options={['owner_id', 'message', 'attachments', 'publish_date', 'post_id', 'mark_as_ads', 'close_comments', 'copyright'].map(value => {\r\n                                            return {value, label: value}\r\n                                        })}\r\n                                        creatable={true}\r\n                                    />\r\n                                </FormItem>\r\n                                {advert_group_params.map((value, index) => (\r\n                                    <FormLayoutGroup mode='horizontal'>\r\n                                        <FormItem>\r\n                                            <Input contentEditable='false' value={value.value}/>\r\n                                        </FormItem>\r\n                                        <FormItem>\r\n                                            <Input value={this[`input_group_${value.value}_param`]} onChange={value1 =>\r\n                                                this[`input_group_${value.value}_param`] = value1.currentTarget.value\r\n                                            }/>\r\n                                        </FormItem>\r\n                                    </FormLayoutGroup>\r\n                                ))}\r\n                                <Div>\r\n                                    <Button size='l'>Отправить</Button>\r\n                                </Div>\r\n                            </FormLayout>\r\n                        </Panel>\r\n                    ]\r\n                },\r\n                {\r\n                    caption: 'Рекламные записи',\r\n                    icon: <Icon28MoneyTransferCircleFillRed/>,\r\n                    id: 'our_advert',\r\n                    panels: [\r\n                        <Panel id='our_advert'>\r\n                            <PanelHeader left={this.canGoBack() ? <PanelHeaderBack onClick={this.back}/> :\r\n                                <PanelHeaderClose onClick={this.back}/>}\r\n                            >\r\n                                Рекламные записи\r\n                            </PanelHeader>\r\n                            <Button\r\n                                size='l' before={<Icon28AddOutline/>}\r\n                                onClick={() => {\r\n                                    this.setActiveModal(MODAL_PAGE_ADD_WALL);\r\n                                }}\r\n                            >\r\n                                Добавить\r\n                            </Button>\r\n                            <FormItem top='Группировать по приложению'>\r\n                                <Select\r\n                                    value={selectedAppIdForWall}\r\n                                    onChange={(value) => this.setState({selectedAppIdForWall: value.currentTarget.value})}\r\n                                    options={[\r\n                                        {\r\n                                            label: 'Не выбрано',\r\n                                            value: 0\r\n                                        },\r\n                                        ...[\r\n                                            {\r\n                                                admin_id: 1,\r\n                                                app_id: 845657,\r\n                                                app_name: 'Название приложения',\r\n                                                group_messages: 1,\r\n                                                group_subscribe: 2,\r\n                                                app_url: 'https://example.com/',\r\n                                                app_sign: ''\r\n                                            }\r\n                                        ].map(value => ({\r\n                                            label: `${value.app_name} (app${value.app_id})`,\r\n                                            value: value.app_id\r\n                                        }))\r\n                                    ]}\r\n                                />\r\n                            </FormItem>\r\n                            {\r\n                                [\r\n                                    {\r\n                                        owner_id: -173263813,\r\n                                        id: 2490,\r\n                                        views: 3700,\r\n                                        likes: 28,\r\n                                        comments: 20,\r\n                                        reposts: 27,\r\n                                        price: 100,\r\n                                        app_id: 845656\r\n                                    }\r\n                                ].filter(value => selectedAppIdForWall == 0 || value.app_id === selectedAppIdForWall).map((value, index) =>\r\n                                    <Group key={`Wall_${index}`} style={{marginTop: 12}}>\r\n                                        <div style={{display: 'flex', alignItems: 'center'}}>\r\n                                            <Title style={{margin: 12}} level='2' weight='regular'>\r\n                                                <Link href={`https://vk.com/wall${value.owner_id}_${value.id}`}\r\n                                                      target='_blank'>\r\n                                                    {`wall${value.owner_id}_${value.id}`}\r\n                                                </Link>\r\n                                            </Title>\r\n                                            <IconButton\r\n                                                style={{color: 'var(--destructive)'}}><Icon24DeleteOutline/></IconButton>\r\n                                        </div>\r\n                                        <CardGrid style={{marginTop: 12}}>\r\n                                            {\r\n                                                [\r\n                                                    ['Просмотры', 'views'],\r\n                                                    ['Лайки', 'likes'],\r\n                                                    ['Комментарии', 'comments'],\r\n                                                    ['Репосты', 'reposts'],\r\n                                                    ['Стоимость', 'price']\r\n                                                ].map((value1, index) =>\r\n                                                    <Card key={`Card_${index}`} size='l' mode='shadow'>\r\n                                                        <div className='CardStats__Container'>\r\n                                                            <Headline weight='regular'>\r\n                                                                {value1[0]}\r\n                                                            </Headline>\r\n                                                            <Title style={{marginTop: 4}} weight='bold' level={1}>\r\n                                                                {value[value1[1]]}\r\n                                                            </Title>\r\n                                                        </div>\r\n                                                    </Card>\r\n                                                )\r\n                                            }\r\n                                        </CardGrid>\r\n                                    </Group>\r\n                                )\r\n                            }\r\n                        </Panel>\r\n                    ],\r\n                    modal: <ModalRoot activeModal={modalHistory[modalHistory.length - 1]}>\r\n                        <ModalPage\r\n                            id={MODAL_PAGE_ADD_WALL}\r\n                            onClose={this.modalBack}\r\n                            header={\r\n                                <ModalPageHeader>Добавление записи</ModalPageHeader>\r\n                            }\r\n                        >\r\n                            <Group>\r\n                                <FormLayout>\r\n                                    <FormLayoutGroup mode='horizontal'>\r\n                                        <FormItem top='Ссылка'>\r\n                                            <Input getRef={(ref) => this.inputWallUrlRef = ref}\r\n                                                   placeholder='vk.com/wall-1_1'/>\r\n                                        </FormItem>\r\n                                        <FormItem top='Стоимость'>\r\n                                            <Input getRef={(ref) => this.inputWallPriceRef = ref} type='number'/>\r\n                                        </FormItem>\r\n                                    </FormLayoutGroup>\r\n                                    <FormItem top='APP_ID'>\r\n                                        <Input getRef={(ref) => this.inputWallAppIdRef = ref}/>\r\n                                    </FormItem>\r\n                                    <Button\r\n                                        stretched mode='primary' size='m'\r\n                                        onClick={() => this.modalBack()}\r\n                                    >\r\n                                        Добавить\r\n                                    </Button>\r\n                                </FormLayout>\r\n                            </Group>\r\n                        </ModalPage>\r\n                    </ModalRoot>\r\n                },\r\n                {\r\n                    caption: 'Контент сайта*',\r\n                    icon: <Icon28StarsCircleFillViolet/>,\r\n                    id: 'site_content',\r\n                    panels: [\r\n                        <Panel id='site_content'>\r\n                            <PanelHeader left={this.canGoBack() ? <PanelHeaderBack onClick={this.back}/> :\r\n                                <PanelHeaderClose onClick={this.back}/>}\r\n                            >\r\n                                Контент сайта\r\n                            </PanelHeader>\r\n                            <Button\r\n                                size='l' before={<Icon28AddOutline/>}\r\n                                onClick={() => {\r\n                                    this.setState({uploadedFile: false});\r\n                                    this.setActiveModal(MODAL_PAGE_ADD_STICKER);\r\n                                }}\r\n                            >\r\n                                Добавить\r\n                            </Button>\r\n                            {\r\n                                data_site_content.map((value, index) =>\r\n                                    <Group key={`Group_${index}`} style={{marginTop: 12}}>\r\n                                        <FormLayout>\r\n                                            <FormLayoutGroup mode='horizontal'>\r\n                                                <Avatar size={62} src={value.image}/>\r\n                                                <FormItem style={{marginLeft: 12}} top='Название'>\r\n                                                    <Input\r\n                                                        contentEditable={false} value={value.title}\r\n                                                        after={<IconButton\r\n                                                            onClick={() => openUrl('https://stickers.ad-app.ru/#article' + value.id)}><Icon16LinkOutline/></IconButton>}/>\r\n                                                </FormItem>\r\n                                                <FormItem top='Просмотры'>\r\n                                                    <Input contentEditable={false} value={value.views}/>\r\n                                                </FormItem>\r\n                                                <FormItem top='Лайки'>\r\n                                                    <Input contentEditable={false} value={value.likes}/>\r\n                                                </FormItem>\r\n                                            </FormLayoutGroup>\r\n                                            <FormItem top='Описание'>\r\n                                                <Textarea contentEditable={false} value={value.description}/>\r\n                                            </FormItem>\r\n                                            <Div style={{display: 'flex'}}>\r\n                                                <Button\r\n                                                    stretched mode='editable' size='m'\r\n                                                    onClick={() => {\r\n                                                        this.setState({modalInfo: value, uploadedFile: false});\r\n                                                        this.setActiveModal(MODAL_PAGE_EDIT_STICKER);\r\n                                                    }}\r\n                                                >\r\n                                                    Изменить\r\n                                                </Button>\r\n                                                <Button\r\n                                                    stretched mode='destructive' size='m'\r\n                                                    style={{\r\n                                                        marginLeft: 4\r\n                                                    }}\r\n                                                    onClick={async () => {\r\n                                                        const response = (await this.api('stickers.remove', {\r\n                                                            id: value.id,\r\n                                                            ...getUrlParams()\r\n                                                        })).response;\r\n                                                        if (response) {\r\n                                                            data_site_content.splice(index, 1);\r\n                                                            this.setState({data_site_content});\r\n                                                        } else {\r\n                                                            console.log(response.err);\r\n                                                        }\r\n                                                    }}\r\n                                                >\r\n                                                    Удалить\r\n                                                </Button>\r\n                                            </Div>\r\n                                        </FormLayout>\r\n                                    </Group>\r\n                                )\r\n                            }\r\n                        </Panel>\r\n                    ],\r\n                    modal: <ModalRoot activeModal={modalHistory[modalHistory.length - 1]}>\r\n                        <ModalPage\r\n                            id={MODAL_PAGE_ADD_STICKER}\r\n                            onClose={this.modalBack}\r\n                            header={\r\n                                <ModalPageHeader\r\n                                    right={<PanelHeaderSubmit onClick={async () => {\r\n                                        const sticker = await this.api('stickers.add', {\r\n                                            ...getUrlParams(), image: uploadedFile,\r\n                                            title: this.inputStickerTitleRef.value,\r\n                                            description: this.inputStickerDescriptionRef.value.replaceAll('\\n', '<br/>'),\r\n                                            url: this.inputStickerUrlRef.value,\r\n                                            id_: this.inputStickerIdRef.value\r\n                                        });\r\n                                        this.setState({data_site_content: [...this.state.data_site_content, sticker.response]});\r\n                                        this.modalBack();\r\n                                    }}/>}\r\n                                >\r\n                                    Добавление\r\n                                </ModalPageHeader>\r\n                            }\r\n                        >\r\n                            <Group>\r\n                                <FormLayout>\r\n                                    <FormLayoutGroup mode='horizontal'>\r\n                                        <input\r\n                                            accept='.png'\r\n                                            type='file'\r\n                                            multiple={false}\r\n                                            ref={ref => this.uploadStickerImageRef = ref}\r\n                                            style={{display: 'none'}}\r\n                                            onChange={async event => this.setState({uploadedFile: await this.uploadFile(event)})}\r\n                                        />\r\n                                        <Avatar size={62} src={uploadedFile}\r\n                                                onClick={() => this.uploadStickerImageRef.click()}/>\r\n                                        <FormItem style={{marginLeft: 12}} top='Название'>\r\n                                            <Input getRef={(ref) => this.inputStickerTitleRef = ref}/>\r\n                                        </FormItem>\r\n                                    </FormLayoutGroup>\r\n                                    <FormItem top='Описание'>\r\n                                        <Textarea getRef={(ref) => this.inputStickerDescriptionRef = ref}/>\r\n                                    </FormItem>\r\n                                    <FormLayoutGroup mode='horizontal'>\r\n                                        <FormItem top='Ссылка на переход'>\r\n                                            <Input getRef={(ref) => this.inputStickerUrlRef = ref}/>\r\n                                        </FormItem>\r\n                                        <FormItem top='ID'>\r\n                                            <Input getRef={(ref) => this.inputStickerIdRef = ref}/>\r\n                                        </FormItem>\r\n                                    </FormLayoutGroup>\r\n                                </FormLayout>\r\n                            </Group>\r\n                        </ModalPage>\r\n                        <ModalPage\r\n                            id={MODAL_PAGE_EDIT_STICKER}\r\n                            onClose={this.modalBack}\r\n                            header={\r\n                                <ModalPageHeader\r\n                                    right={<PanelHeaderSubmit onClick={async () => {\r\n                                        const\r\n                                            to_check = [\r\n                                                this.inputStickerTitleRef,\r\n                                                this.inputStickerDescriptionRef,\r\n                                                this.inputStickerUrlRef,\r\n                                                this.inputStickerIdRef\r\n                                            ],\r\n                                            edited_keys = {}\r\n                                        ;\r\n\r\n                                        for (const element of to_check) {\r\n                                            const {key} = element.dataset;\r\n                                            if (element.value !== modalInfo[key]) {\r\n                                                edited_keys[key] = element.value === '' ? undefined : element.value;\r\n                                            }\r\n                                        }\r\n\r\n                                        if (uploadedFile) {\r\n                                            edited_keys.image = uploadedFile;\r\n                                        }\r\n\r\n                                        if (Object.keys(edited_keys).length > 0) {\r\n                                            const response = (await this.api('stickers.edit', {\r\n                                                ...getUrlParams(), ...edited_keys,\r\n                                                id: modalInfo.id\r\n                                            })).response;\r\n                                            if (response) {\r\n                                                const {data_site_content} = this.state;\r\n                                                data_site_content[data_site_content.findIndex(value => value.id === response.id)] = response;\r\n                                                await this.setState({data_site_content});\r\n                                            }\r\n                                        }\r\n                                        this.modalBack();\r\n                                    }}/>}\r\n                                >\r\n                                    Редактирование\r\n                                </ModalPageHeader>\r\n                            }\r\n                        >\r\n                            <Group>\r\n                                <FormLayout>\r\n                                    <FormLayoutGroup mode='horizontal'>\r\n                                        <input\r\n                                            accept='.png'\r\n                                            type='file'\r\n                                            multiple={false}\r\n                                            ref={ref => this.uploadStickerImageRef = ref}\r\n                                            style={{display: 'none'}}\r\n                                            onChange={async event => this.setState({uploadedFile: await this.uploadFile(event)})}\r\n                                        />\r\n                                        <Avatar size={62} src={uploadedFile || modalInfo.image}\r\n                                                onClick={() => this.uploadStickerImageRef.click()}/>\r\n                                        <FormItem style={{marginLeft: 12}} top='Название'>\r\n                                            <Input\r\n                                                data-key='title'\r\n                                                getRef={(ref) => this.inputStickerTitleRef = ref}\r\n                                                defaultValue={modalInfo.title}\r\n                                            />\r\n                                        </FormItem>\r\n                                    </FormLayoutGroup>\r\n                                    <FormItem top='Описание'>\r\n                                        <Textarea data-key='description'\r\n                                                  getRef={(ref) => this.inputStickerDescriptionRef = ref}\r\n                                                  defaultValue={modalInfo.description}\r\n                                        />\r\n                                    </FormItem>\r\n                                    <FormLayoutGroup mode='horizontal'>\r\n                                        <FormItem top='Ссылка на переход'>\r\n                                            <Input data-key='url' getRef={(ref) => this.inputStickerUrlRef = ref}\r\n                                                   defaultValue={modalInfo.url}/>\r\n                                        </FormItem>\r\n                                        <FormItem top='ID'>\r\n                                            <Input data-key='id_' getRef={(ref) => this.inputStickerIdRef = ref}\r\n                                                   defaultValue={modalInfo.id_}/>\r\n                                        </FormItem>\r\n                                    </FormLayoutGroup>\r\n                                </FormLayout>\r\n                            </Group>\r\n                        </ModalPage>\r\n                    </ModalRoot>,\r\n                    method: 'stickers.get'\r\n                }\r\n            ]\r\n        ;\r\n\r\n        const Application = withAdaptivity(({viewWidth}) => {\r\n            const\r\n                isDesktop = viewWidth >= ViewWidth.SMALL_TABLET,\r\n                styleForSelectedCell = {\r\n                    backgroundColor: 'var(--button_secondary_background)',\r\n                    borderRadius: 8\r\n                }\r\n            ;\r\n\r\n            return (\r\n                <SplitLayout\r\n                    style={{justifyContent: 'center'}}\r\n                >\r\n                    {isDesktop && (\r\n                        <SplitCol fixed width='280px' maxWidth='280px'>\r\n                            <Panel>\r\n                                <Group>\r\n                                    {\r\n                                        tabs.map(((value, index) =>\r\n                                                <Cell\r\n                                                    key={`Cell_${index}`}\r\n                                                    disabled={activeStory === value.id}\r\n                                                    style={{marginTop: index > 0 && 4, ...activeStory === value.id ? styleForSelectedCell : {}}}\r\n                                                    data-story={value.id}\r\n                                                    onClick={async (e) => {\r\n                                                        this.onStoryChange(e);\r\n                                                        if (value.method)\r\n                                                            await this.setState({\r\n                                                                popout: <ScreenSpinner/>,\r\n                                                                [`data_${value.id}`]: (await this.api(value.method, getUrlParams())).response\r\n                                                            });\r\n\r\n                                                        this.setState({popout: null});\r\n                                                    }}\r\n                                                    before={value.icon}\r\n                                                >\r\n                                                    {value.caption}\r\n                                                </Cell>\r\n                                        ))\r\n                                    }\r\n                                </Group>\r\n                            </Panel>\r\n                        </SplitCol>\r\n                    )}\r\n                    <SplitCol\r\n                        animate={!isDesktop}\r\n                        spaced={isDesktop}\r\n                        width={isDesktop ? '680px' : '100%'}\r\n                        maxWidth={isDesktop ? '680px' : '100%'}\r\n                    >\r\n                        <Epic activeStory={activeStory} tabbar={!isDesktop &&\r\n                            <Tabbar>\r\n                                {\r\n                                    tabs.map(((value, index) =>\r\n                                            <TabbarItem\r\n                                                key={`Cell_${index}`}\r\n                                                onClick={this.onStoryChange}\r\n                                                selected={activeStory === value.id}\r\n                                                data-story={value.id}\r\n                                                text={value.caption}\r\n                                            >{value.icon}</TabbarItem>\r\n                                    ))\r\n                                }\r\n                            </Tabbar>\r\n                        }>\r\n                            {\r\n                                tabs.map(((value, index) =>\r\n                                        <View\r\n                                            key={`View_${index}`} id={value.id}\r\n                                            activePanel={storyHistory[value.id][storyHistory[value.id].length - 1]}\r\n                                            modal={value.modal}\r\n                                        >\r\n                                            {value.panels}\r\n                                        </View>\r\n                                ))\r\n                            }\r\n                        </Epic>\r\n                        {this.state.snackbar}\r\n                    </SplitCol>\r\n                </SplitLayout>\r\n            );\r\n        }, {\r\n            viewWidth: true\r\n        });\r\n\r\n        return (\r\n            <Application/>\r\n        );\r\n    }\r\n}\r\n\r\nexport default AdvertisementApp;","import 'core-js/features/map';\nimport 'core-js/features/set';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport '@vkontakte/vkui/dist/vkui.css';\nimport '@vkontakte/vkui/dist/unstable.css'\nimport {AdaptivityProvider, AppRoot, ConfigProvider} from \"@vkontakte/vkui\";\n\nimport './css/Fonts.css';\nimport './css/Error.css';\nimport './css/Utils.css';\n\n//import App from './apps/Tracker';\n//import App from './apps/Wheel';\n//import App from './apps/MedicalCard';\n//import App from './apps/AskMe';\n//import App from './apps/LoveAnalysis';\n//import App from './apps/BattleStat';\n//import App from './apps/BattleStatCatalog';\n//import App from './apps/YearTest';\n//import App from './apps/IQTest';\n//import App from './apps/MvsW';\n//import App from './apps/DeathDate';\n//import App from './apps/DeathDate2';\n//import App from './apps/Slaves';\n//import App from './apps/VKTime';\n//import App from './apps/LikesStat';\n//import App from './apps/VKAccPrice';\n//import App from './apps/DateCelebrity';\n//import App from './apps/NameInCountry';\n//import App from './apps/AccKarma';\nimport App from './apps/AdvertisementApp';\n//import App from './apps/AdvertisementAppSite';\n//import App from './apps/ClickerBattle/ClickerBattle';\n//import App from './apps/Drawing/Drawing';\n//import App from './apps/Drawing/Global';\n//import App from './apps/RandomCooking';\n\n\nReactDOM.render(\n        <ConfigProvider>\n            <AdaptivityProvider>\n                <AppRoot>\n                    <App/>\n                </AppRoot>\n            </AdaptivityProvider>\n        </ConfigProvider>, document.getElementById('root')\n);\n"],"sourceRoot":""}